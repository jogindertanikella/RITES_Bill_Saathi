using Microsoft.AspNetCore.Mvc;
using Azure;
using System.IO;
using System.Threading.Tasks;
using Azure.AI.FormRecognizer.DocumentAnalysis;
using Newtonsoft.Json;
using RestSharp;
using RITES_Bill_Saathi.Models;
using static RITES_Bill_Saathi.Controllers.HomeController;

namespace RITES_Bill_Saathi.Controllers;
public class HomeController : Controller
{
    private readonly string endpoint = "https://centralindia.api.cognitive.microsoft.com/";
    private readonly string apiKey = "0817161aa32d40daac59ce64be3fa819";
    private readonly AzureKeyCredential credential;

    public HomeController()
    {
        credential = new AzureKeyCredential(apiKey);
    }


    public IActionResult Index()
    {
        return View();
    }

    public class Root_PDFAPI
    {
        public string url { get; set; }
        public DateTime outputLinkValidTill { get; set; }
        public bool error { get; set; }
        public int status { get; set; }
        public string name { get; set; }
        public int credits { get; set; }
        public int remainingCredits { get; set; }
        public int duration { get; set; }
    }

    public async Task<string> UploadFilePDFAPI(string pdfFilePath)
    {
        var client = new RestClient("https://api.pdf.co/v1/file/upload");
        //client.Timeout = -1;
        var request = new RestRequest();
        request.Method = Method.Post;
        request.AddHeader("x-api-key", Settings.pdfcoAPI_key);
        request.AddFile("file", pdfFilePath);
        RestResponse response = await client.ExecuteAsync(request);

        string result = response.Content;

        Root_PDFAPI root_PDFAPI = JsonConvert.DeserializeObject<Root_PDFAPI>(result);

        string uploadedfileurl = root_PDFAPI.url;


        return uploadedfileurl; // This should be replaced with the actual file URL from the response
    }

    [HttpPost]
    public async Task<IActionResult> UploadPDF(IFormFile pdfFile)
    {
        try
        {
            string result = "";

            if (pdfFile != null && pdfFile.Length > 0)
            {

                // Save the uploaded PDF temporarily
                var tempPdfPath = Path.Combine(Path.GetTempPath(), pdfFile.FileName);
                using (var stream = new FileStream(tempPdfPath, FileMode.Create))
                {
                    await pdfFile.CopyToAsync(stream);
                }

                string pdfFilePath = tempPdfPath;

                // Upload the PDF file and get the URL
                string uploadedFileUrl = await UploadFilePDFAPI(pdfFilePath);

              result = await AnalyzeInvoiceAsync(uploadedFileUrl);

                return Json(new { resultDescription = result });

            }

            return Json(new { resultDescription = result });
        }
        catch (Exception ex)
        {
            string result = "";
            return Json(new { resultDescription = result });
        }
    }

    // Assuming you're using this method within an async context
    public async Task<string> AnalyzeInvoiceAsync(string fileURL)
    {
        DocumentAnalysisClient client = new DocumentAnalysisClient(new Uri(endpoint), credential);

        // Sample document
        Uri invoiceUri = new Uri(fileURL);

        AnalyzeDocumentOperation operation = await client.AnalyzeDocumentFromUriAsync(WaitUntil.Completed, "prebuilt-invoice", invoiceUri);

        AnalyzeResult result = operation.Value;

        // Initialize the result string
        string resultString = "";

        for (int i = 0; i < result.Documents.Count; i++)
        {
            resultString += $"Document {i}:\n";

            AnalyzedDocument document = result.Documents[i];

            if (document.Fields.TryGetValue("VendorName", out DocumentField? vendorNameField))
            {
                if (vendorNameField.FieldType == DocumentFieldType.String)
                {
                    string vendorName = vendorNameField.Value.AsString();
                    resultString += $"Vendor Name: '{vendorName}', with confidence {vendorNameField.Confidence}\n";
                }
            }

            if (document.Fields.TryGetValue("CustomerName", out DocumentField? customerNameField))
            {
                if (customerNameField.FieldType == DocumentFieldType.String)
                {
                    string customerName = customerNameField.Value.AsString();
                    resultString += $"Customer Name: '{customerName}', with confidence {customerNameField.Confidence}\n";
                }
            }

            if (document.Fields.TryGetValue("Items", out DocumentField? itemsField))
            {
                if (itemsField.FieldType == DocumentFieldType.List)
                {
                    foreach (DocumentField itemField in itemsField.Value.AsList())
                    {
                        resultString += "Item:\n";

                        if (itemField.FieldType == DocumentFieldType.Dictionary)
                        {
                            IReadOnlyDictionary<string, DocumentField> itemFields = itemField.Value.AsDictionary();

                            if (itemFields.TryGetValue("Description", out DocumentField? itemDescriptionField))
                            {
                                if (itemDescriptionField.FieldType == DocumentFieldType.String)
                                {
                                    string itemDescription = itemDescriptionField.Value.AsString();

                                    resultString += $"  Description: '{itemDescription}', with confidence {itemDescriptionField.Confidence}\n";
                                }
                            }

                            if (itemFields.TryGetValue("Amount", out DocumentField? itemAmountField))
                            {
                                if (itemAmountField.FieldType == DocumentFieldType.Currency)
                                {
                                    CurrencyValue itemAmount = itemAmountField.Value.AsCurrency();

                                    resultString += $"  Amount: '{itemAmount.Symbol}{itemAmount.Amount}', with confidence {itemAmountField.Confidence}\n";
                                }
                            }
                        }
                    }
                }
            }

            if (document.Fields.TryGetValue("SubTotal", out DocumentField? subTotalField))
            {
                if (subTotalField.FieldType == DocumentFieldType.Currency)
                {
                    CurrencyValue subTotal = subTotalField.Value.AsCurrency();
                    resultString += $"Sub Total: '{subTotal.Symbol}{subTotal.Amount}', with confidence {subTotalField.Confidence}\n";
                }
            }

            if (document.Fields.TryGetValue("TotalTax", out DocumentField? totalTaxField))
            {
                if (totalTaxField.FieldType == DocumentFieldType.Currency)
                {
                    CurrencyValue totalTax = totalTaxField.Value.AsCurrency();
                    resultString += $"Total Tax: '{totalTax.Symbol}{totalTax.Amount}', with confidence {totalTaxField.Confidence}\n";
                }
            }

            if (document.Fields.TryGetValue("InvoiceTotal", out DocumentField? invoiceTotalField))
            {
                if (invoiceTotalField.FieldType == DocumentFieldType.Currency)
                {
                    CurrencyValue invoiceTotal = invoiceTotalField.Value.AsCurrency();
                    resultString += $"Invoice Total: '{invoiceTotal.Symbol}{invoiceTotal.Amount}', with confidence {invoiceTotalField.Confidence}\n";
                }
            }
        }

        // Return the result string
        return resultString;
    }

}

