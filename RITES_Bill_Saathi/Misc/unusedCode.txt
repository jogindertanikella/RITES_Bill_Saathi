    [HttpPost]
    public async Task<IActionResult> UploadPDFPrevious(IFormFile pdfFile)
    {
        try
        {
            if (pdfFile != null && pdfFile.Length > 0)
            {
                // Configuration for FTP upload
                string ftpHost = "ftp://accelracer.com";
                string ftpFolderPathImages = "/public_html/medicalbills";
                string ftpFolderPathPDFs = "/public_html/PDFmedicalbills";
                string ftpUsername = "admin@accelracer.com";
                string ftpPassword = @"YJ@[fKwrYIU6";
                string newfilename = UniversalHelper.GenerateFileName("jpg");
                string pdfFileName = UniversalHelper.GenerateFileName("pdf");

                // Save the uploaded PDF temporarily
                var tempPdfPath = Path.Combine(Path.GetTempPath(), pdfFile.FileName);
                using (var stream = new FileStream(tempPdfPath, FileMode.Create))
                {
                    await pdfFile.CopyToAsync(stream);
                }

                // First, upload the PDF to FTP
                string ftpFullPDFPath = $"{ftpHost}{ftpFolderPathPDFs}/{pdfFileName}";
                FtpWebRequest pdfRequest = (FtpWebRequest)WebRequest.Create(ftpFullPDFPath);
                pdfRequest.Method = WebRequestMethods.Ftp.UploadFile;
                pdfRequest.Credentials = new NetworkCredential(ftpUsername, ftpPassword);
                pdfRequest.UsePassive = true;
                pdfRequest.UseBinary = true;
                pdfRequest.KeepAlive = false;

                using (Stream fileStream = new FileStream(tempPdfPath, FileMode.Open))
                using (Stream ftpStream = pdfRequest.GetRequestStream())
                {
                    await fileStream.CopyToAsync(ftpStream);
                }

                // Initialize Aspose.Pdf Document object
                var document = new Aspose.Pdf.Document(tempPdfPath);

                // Define the output directory and make sure it exists
                var outputDir = Path.Combine(Path.GetTempPath(), "ConvertedImages");
                Directory.CreateDirectory(outputDir);

                var pageFilePath = Path.Combine(outputDir, newfilename);
                using (var imageStream = new FileStream(pageFilePath, FileMode.Create))
                {
                    // Convert PDF page to JPG
                    var jpegDevice = new Aspose.Pdf.Devices.JpegDevice(new Aspose.Pdf.Devices.Resolution(300), 100);
                    jpegDevice.Process(document.Pages[1], imageStream); // Pages are 1-indexed
                }

                // Then, upload the image to FTP
                string ftpFullImagePath = $"{ftpHost}{ftpFolderPathImages}/{newfilename}";
                FtpWebRequest imageRequest = (FtpWebRequest)WebRequest.Create(ftpFullImagePath);
                imageRequest.Method = WebRequestMethods.Ftp.UploadFile;
                imageRequest.Credentials = new NetworkCredential(ftpUsername, ftpPassword);
                imageRequest.UsePassive = true;
                imageRequest.UseBinary = true;
                imageRequest.KeepAlive = false;

                using (Stream fileStream = new FileStream(pageFilePath, FileMode.Open))
                using (Stream ftpStream = imageRequest.GetRequestStream())
                {
                    await fileStream.CopyToAsync(ftpStream);
                }

                // Optional: Delete the local image file and PDF after upload
                System.IO.File.Delete(pageFilePath);
                System.IO.File.Delete(tempPdfPath);

                // Return the URL of the image
                string imageUrl = ftpFullImagePath.Replace("ftp://", "https://").Replace("/public_html", "");
                return Json(new { ImageUrl = imageUrl });
            }

            //      return BadRequest("No file uploaded.");

            string defaultImageUrl = @"https://accelracer.com/medicalbills/default.jpg";
            return Json(new { ImageUrl = defaultImageUrl});
        }
        catch (Exception ex)
        {
            // In case of an exception, return a default image URL
            string defaultImageUrl = @"https://accelracer.com/medicalbills/default.jpg";
            return Json(new { ImageUrl = defaultImageUrl, Error = ex.Message });
        }
    }



//Local Directory - 25th March 2024
    [HttpPost]
    public async Task<IActionResult> UploadFile(IFormFile pdfFile)
    {
        try
        { 
        if (pdfFile == null || pdfFile.Length == 0)
        {
            return BadRequest("No file uploaded.");
        }

        var pdfFileName = Path.GetFileNameWithoutExtension(pdfFile.FileName);
        var workingDirectory = Path.Combine(Directory.GetCurrentDirectory(), pdfFileName);

        // Create a new directory for the uploaded PDF if it doesn't already exist
        if (!Directory.Exists(workingDirectory))
        {
            Directory.CreateDirectory(workingDirectory);
        }

        var pdfFilePath = Path.Combine(workingDirectory, pdfFile.FileName);

        // Save the PDF file to the newly created directory
        using (var stream = new FileStream(pdfFilePath, FileMode.Create))
        {
            await pdfFile.CopyToAsync(stream);
        }

        // Convert PDF to images
        List<string> imagePaths = await AsposePdfConverter.ConvertPdfToImages(new FileStream(pdfFilePath, FileMode.Open, FileAccess.Read), pdfFile.FileName, workingDirectory);

        return Ok(new { ImageUrls = imagePaths });
        }
        catch (Exception ex)
        {
            List<string> imagePaths = new List<string>();

            return Ok(new { ImageUrls = imagePaths });
        }
    }


        // Modify the uploadFile function to handle multiple images and wait for all promises to resolve
        function uploadFile(formData) {
            showModal(); // Show the modal spinner when the upload starts
            $.ajax({
                url: '/Home/UploadPDFAndConvertAllPages',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function (data) {
                    console.log(data);
                    hideModal(); // Hide the modal spinner after receiving the data
                    var imagesContainer = document.querySelector('.left-pane');
                    imagesContainer.innerHTML = ''; // Clear the existing content

                    // Create an array of promises for each image upload
                    var uploadPromises = data.imageUrls.map(function (imageUrl) {
                        // Display each image in the left-pane
                        var img = document.createElement('img');
                        img.classList.add('image-border');
                        img.src = imageUrl;
                        img.style.display = 'block';
                        img.style.maxWidth = '100%';
                        imagesContainer.appendChild(img);

                        return uploadImage(imageUrl); // Return the promise
                    });

                    // Update status text
                    document.getElementById("descriptionStatus").innerText = "PDF file successfully processed. Now analysing..";

                    document.getElementById("spinnerText").innerText = "Analyzing..";

                    document.getElementById("descriptionStatus").innerText = "Waiting for Analysis results..";
                    document.getElementById("descriptionSpinner").style.display = "block";
                    document.getElementById("searchingSpinner").style.display = "none";
                    showModal();

                    // Wait for all images to be processed
                    Promise.all(uploadPromises).then(function (descriptions) {
                        // All images have been processed, update the description text
                        document.getElementById("descriptionStatus").innerText = "PDF file successfully processed. Now analysing..";
                        descriptions.forEach(function (description) {
                            document.getElementById("descriptionText").innerText += description + "\n";
                        });
                    }).catch(function (error) {
                        console.error("An error occurred while processing images:", error);
                        document.getElementById("descriptionStatus").innerText = "An error occurred. Please try again.";
                    });
                },
                error: function (xhr, status, error) {
                    console.error("Upload failed:", error);
                    hideModal(); // Also hide the modal on error
                    document.getElementById("descriptionStatus").innerText = "Upload failed. Please try again.";
                }
            });
        }

        function uploadImage(imageUrl) {
            return new Promise((resolve, reject) => {
                showModal();
                $.ajax({
                    url: '/Home/ProcessUploadedImage',
                    type: 'POST',
                    data: {
                        imagefilePath: imageUrl,
                        // Assume imagefileName is either part of imageUrl or not needed; adjust as necessary
                    },
                    success: function (data) {
                        document.getElementById("descriptionSpinner").style.display = "none";
                        document.getElementById("searchingSpinner").style.display = "none";
                        hideModal(); // Also hide the modal on error
                        resolve(data); // Resolve the promise with the data
                    },
                    error: function (xhr, status, error) {
                        document.getElementById("descriptionSpinner").style.display = "none";
                        document.getElementById("searchingSpinner").style.display = "none";
                        hideModal(); // Also hide the modal on error
                        reject(error); // Reject the promise on error
                    }
                });
            });
        }